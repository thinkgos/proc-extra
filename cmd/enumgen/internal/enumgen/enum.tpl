// Code generated by enumgen. DO NOT EDIT.
// version: {{.Version}}
{{- if .IsDeprecated}}
//
// Deprecated: this is a deprecated file.
{{- end}}
package {{.Package}}

import (
	"slices"
{{- if not .HasAnyString}}
	"strconv"
{{- end}}
)

{{- range $e := .Enums}}
{{- if $e.TypeComment}}
// {{$e.TypeComment}}
{{- end}}
var __{{$e.TypeName}}_Enum_Validity = []{{$e.TypeName}} { 
{{- range $ee := .Values}}
	{{$ee.OriginalName}}, // {{$ee.RawValue}}: {{$ee.Label}}
{{- end}}
}

// Value returns the original type value.
// {{$e.Explain}}
func (x {{$e.TypeName}}) Value() {{$e.Type}} {
    return {{$e.Type}}(x)
}

// ValueString returns the original type value as string.
// {{$e.Explain}}
func (x {{$e.TypeName}}) ValueString() string {
    return {{if $e.IsString}} x.Value() {{else}} strconv.FormatInt(int64(x), 10) {{end}}
}

// EnumCount the number of enum values.
func ({{$e.TypeName}}) EnumCount() int {
	return {{len .Values}}
}

// IsValid whether the enum value is valid or not.
func (x {{$e.TypeName}}) IsValid() bool {
	return slices.Contains(__{{$e.TypeName}}_Enum_Validity, {{$e.TypeName}}(x))
}

// Label returns the enum value's label.
// {{.Explain}}
func (x {{$e.TypeName}}) Label() (s string) {
	switch x {
	{{- range $ee := .Values}}
		case {{$ee.OriginalName}}: // {{$ee.RawValue}}
			s = "{{$ee.Label}}"
	{{- end}}
		default:
			s = ""
	}
	return s
}

// FromLabel parse string to the enum value
// {{$e.Explain}}
func (x *{{$e.TypeName}}) FromLabel(s string) {
	switch s {
	{{- range $ee := .Values}}
		case "{{$ee.Label}}": // {{$ee.RawValue}}
			*x = {{$ee.OriginalName}}
	{{- end}}
		default:
			var dflt {{$e.TypeName}}
			*x = dflt
	}
}
{{- end}}
