// Code generated by astgen. DO NOT EDIT.
// version: {{.Version}}
{{- if .IsDeprecated}}
//
// Deprecated: this is a deprecated file.
{{- end}}
package {{.Package}}

import (
	"strconv"
)

{{- range $e := .Enums}}
var (
	__{{$e.TypeName}}_Mapping_Validity = map[{{$e.TypeName}}]struct{}{
	{{- range $ee := .Values}}
		{{$ee.Value}}: {},
	{{- end}}
	}
	__{{$e.TypeName}}_Mapping_Value = map[string]{{$e.TypeName}}{
	{{- range $ee := .Values}}
		"{{$ee.Mapping}}": {{$ee.Value}},
	{{- end}}
	}
)

// IntoValueNumber returns the enum value as an integer.
func (x {{$e.TypeName}}) IntoValueNumber() {{$e.Type}} {
    return {{$e.Type}}(x)
}

// IntoValueString returns the enum value as an integer string.
func (x {{$e.TypeName}}) IntoValueString() string {
    return strconv.FormatInt(int64(x), 10)
}

// EnumCount the number of enum values.
func ({{$e.TypeName}}) EnumCount() int {
	return {{len .Values}}
}

// IsValid whether the enum value is valid or not.
func (x {{$e.TypeName}}) IsValid() bool {
	_, ok := __{{$e.TypeName}}_Mapping_Validity[x]
	return ok
}

// IntoLabel returns the enum label.
// {{.Explain}}
func (x {{$e.TypeName}}) IntoLabel() string {
	return x.String()
}

// FromLabel parse string to enum value
// {{$e.Explain}}
func (x *{{$e.TypeName}}) FromLabel(s string) {
	*x = __{{$e.TypeName}}_Mapping_Value[s]
}
{{- end}}
